
      # if packet inputs from port 0, then it outputs to port 2
      if (s.in0_deq_val == 1):
        if (s.isdest0 == 1):
          s.in_reqs0.value = 2
        else:
          s.in_reqs0.value = 4
      else:
        s.in_reqs0.value = 0


      s.num_forw_entries.value  = s.num_free_west + s.num_free + s.channel_forw_entries
      s.num_backw_entries.value = s.num_free_east + s.num_free + s.channel_backw_entries
#----------------------------------------------------------------------------------------------------
 
      if (s.dest1 > s.router_id):
        
        # a_forw_d is the number of hops between source(samller) and destination(larger) if packet goes clockwise(east)
        # b_forw_d is the load of the network if packet goes clockwise(east) when dest>source
        
        a_forw_d = s.dest1 - s.router_id + 1
        b_forw_d = 0
        
        for i in xrange(a_forw_d):
          b_forw_d = b_forw_d + num_forw_regs[(s.router_id+i)*4:(s.router_id+i+1)*4]
        
        # a_backw_d is the number of hops between source(smaller) and destination(larger) if packet goes counterclockwise(west)
        # b_backw_d is the load of the network if packet goes counterclockwise(west) when dest>source
        
        a_backw_d = s.router_id + 1
        b_backw_d = 0
        for i in xrange(a_backw_d):
          b_backw_d = b_backw_d + num_backw_regs[i*4:(i+1)*4]
        for i in xrange(s.dest1, 8):
          b_backw_d = b_backw_d + num_backw_regs[i*4:(i+1)*4]
          
      if (s.dest1 < s.router_id):
      
        # a_backw_i is the number of hops between source(larger) and destination(smaller) if packet goes counterclockwise(west)
        # b_backw_i is the load of the network if packet goes counterclockwise(west) when dest<source
        
        a_backw_i = s.router_id - s.dest1 + 1
        b_backw_i = 0
        
        for i in xrange(a_backw_i):
          b_backw_i = b_backw_i + num_backw_regs[(s.router_id-i)*4:(s.router_id-i+1)*4]
        
        # a_forw_i is the number of hops between source(larger) and destination(smaller) if packet goes clockwise(east)         
        # b_forw_i is the load of the network if packet goes clockwise(east) when dest<source
        a_forw_i = s.dest1 + 1
        b_forw_i = 0
        for i in xrange(a_forw_i):
          b_forw_i = b_forw_i + num_forw_regs[i*4:(i+1)*4]
        for i in xrange(s.router_id, 8):
          b_forw_i = b_forw_I + num_forw_regs[i*4:(i+1)*4]
#-----------------------------------------------------------------------------------------------------      
      if (s.in1_deq_val == 1):
      
        if (s.isdest1 == 1):
          s.in_reqs1.value = 2
          
        elif: (s.dest1 > s.router_id):
            if (b_forw_d > b_backw_d):
              s.in_reqs1.value = 1
            else:
              s.in_reqs1.value = 4
          
        else:
            if (b_forw_i > b_backw_i):
              s.in_reqs1.value = 1
            else:
              s.in_reqs1.value = 4
          
      else:
        s.in_reqs1.value = 0

      # if packet inputs from port 2, then it outputs to port 0
      if (s.in2_deq_val == 1):
        if (s.isdest2 == 1):
          s.in_reqs2.value = 2
        else:
          s.in_reqs2.value = 1
      else:
        s.in_reqs2.value = 0

  # locl logic
      if ((s.in_reqs1[0]==1 and s.num_free_east>1) or (s.in_reqs1[2]==1 and s.num_free_west>1 )or s.in_reqs1[1]!=0 ):
        s.in_reqs1_mux.sel.value = 0;
      else:
        s.in_reqs1_mux.sel.value = 1;
